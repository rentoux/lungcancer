import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.preprocessing import LabelEncoder
from sklearn.naive_bayes import BernoulliNB
from sklearn.metrics import accuracy_score, classification_report, roc_auc_score, precision_recall_curve
from imblearn.combine import SMOTETomek
from imblearn.pipeline import Pipeline

csv_path = r"C:\Users\WINDOWS 11\OneDrive\Documents\survey-lung-cancer.csv"
df = pd.read_csv(csv_path)

df.columns = [c.strip().upper().replace(' ', '_') for c in df.columns]
df["GENDER"] = LabelEncoder().fit_transform(df["GENDER"])
df["LUNG_CANCER"] = LabelEncoder().fit_transform(df["LUNG_CANCER"])

symptoms = [
    "SMOKING", "YELLOW_FINGERS", "ANXIETY", "PEER_PRESSURE",
    "CHRONIC_DISEASE", "ALLERGY", "WHEEZING", "ALCOHOL_CONSUMING",
    "COUGHING", "SHORTNESS_OF_BREATH", "CHEST_PAIN", "FATIGUE",
    "SWALLOWING_DIFFICULTY"
]
for col in symptoms:
    df[col] = (df[col] == 2).astype(int)

df["AGE_BIN"] = pd.cut(
    df["AGE"],
    bins=[0, 30, 50, 70, 100],
    labels=[0, 1, 2, 3]
).astype(int)

df["SMK_CHR"] = ((df["SMOKING"] == 1) & (df["CHRONIC_DISEASE"] == 1)).astype(int)

X = df.drop(columns=["LUNG_CANCER", "AGE"])
y = df["LUNG_CANCER"]

X = pd.get_dummies(X, columns=["AGE_BIN", "SMK_CHR"], drop_first=False)

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.25, stratify=y, random_state=42
)

pipe = Pipeline([
    ("resample", SMOTETomek(random_state=42)),
    ("nb", BernoulliNB(class_prior=[0.5, 0.5]))
])

param_grid = {"nb__alpha": [0.01, 0.1, 0.5, 1.0]}
grid = GridSearchCV(pipe, param_grid, cv=5, scoring="roc_auc", n_jobs=-1)
grid.fit(X_train, y_train)

best = grid.best_estimator_
y_proba = best.predict_proba(X_test)[:, 1]
y_pred = np.where(y_proba >= 0.5, 1, 0)

auc = roc_auc_score(y_test, y_proba)
precision, recall, thresholds = precision_recall_curve(y_test, y_proba)
f1_scores = 2 * (precision * recall) / (precision + recall + 1e-12)
best_idx = np.argmax(f1_scores)
optimal_threshold = thresholds[best_idx]
y_pred_opt = np.where(y_proba >= optimal_threshold, 1, 0)

print("Best α:", grid.best_params_["nb__alpha"])
print("ROC-AUC:", auc)
print("Default-threshold accuracy:", accuracy_score(y_test, y_pred))
print("Default-threshold report:\n", classification_report(y_test, y_pred))
print("Optimal threshold:", optimal_threshold)
print("Threshold-tuned accuracy:", accuracy_score(y_test, y_pred_opt))
print("Threshold-tuned report:\n", classification_report(y_test, y_pred_opt))

nb_final = BernoulliNB(alpha=grid.best_params_["nb__alpha"], class_prior=[0.5, 0.5])
pipeline_full = Pipeline([("resample", SMOTETomek(random_state=42)), ("nb", nb_final)])
cv_scores = cross_val_score(pipeline_full, X, y, cv=5, scoring="roc_auc", n_jobs=-1)
print("5-fold CV ROC-AUC:", cv_scores.mean(), "±", cv_scores.std())
